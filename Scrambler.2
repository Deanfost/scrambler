#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.10.1 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 63 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 13 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 65 105 225 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
17 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
24 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
15 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
44 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
46 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
          0 2523 0 4 3 85
(
 #";; The first three lines of this file were inserted by DrRacket. The"
 #"y record metadata"
) 0 0 4 29 1 #"\n"
0 0 4 3 85
(
 #";; about the language level of this file in a form that our tools ca"
 #"n easily process."
) 0 0 4 29 1 #"\n"
0 0 4 3 183
(
 #"#reader(lib \"htdp-intermediate-reader.ss\" \"lang\")((modname Scram"
 #"bler) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t c"
 #"onstructor repeating-decimal #f #t none #f () #f)))"
) 0 0 4 29 1 #"\n"
0 0 17 3 22 #"; Author : Dean Foster"
0 0 24 29 1 #"\n"
0 0 17 3 28 #"; Purpose : A word scrambler"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 17 3 11 #"; Algorithm"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #"; - Take all vowels in the word and replace them with the next vowel"
 #" in the list"
) 0 0 24 29 1 #"\n"
0 0 17 3 79
(
 #"; (A, E, I, O, U, (Y)), with 'Y's only being counted as a Vowel if i"
 #"t is inside"
) 0 0 24 29 1 #"\n"
0 0 17 3 52 #"; the String, and is not to be used as a replacement"
0 0 24 29 1 #"\n"
0 0 17 3 58
#"; - Insert the last vowel replacement 2 positions after it"
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #"; - If the last replacement is the last 1String in the list, then do"
 #" nothing"
) 0 0 24 29 1 #"\n"
0 0 17 3 7 #"; extra"
0 0 24 29 1 #"\n"
0 0 17 3 79
(
 #"; - Iff there is a 'Y' in the word, then replace it with 'A' (case-i"
 #"nsensitive)"
) 0 0 24 29 1 #"\n"
0 0 17 3 65
#";   with that new 'A' becoming the next candidate as an insertion"
0 0 24 29 1 #"\n"
0 0 17 3 56 #"; - Note - The algorithm will only perform insertions if"
0 0 17 3 19 #" the entire current"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";   String is alphabetical"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 11 #"; Examples:"
0 0 24 29 1 #"\n"
0 0 17 3 29 #"; - Kensington -> Kinsongtunu"
0 0 24 29 1 #"\n"
0 0 17 3 19 #"; - About -> Ebuata"
0 0 24 29 1 #"\n"
0 0 17 3 20 #"; - Prince -> Pronci"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #"; A Vowel is a String, and is one of:"
0 0 24 29 1 #"\n"
0 0 17 3 7 #"; - 'A'"
0 0 24 29 1 #"\n"
0 0 17 3 7 #"; - 'E'"
0 0 24 29 1 #"\n"
0 0 17 3 7 #"; - 'I'"
0 0 24 29 1 #"\n"
0 0 17 3 7 #"; - 'O'"
0 0 24 29 1 #"\n"
0 0 17 3 7 #"; - 'U'"
0 0 24 29 1 #"\n"
0 0 17 3 6 #"; - \"\""
0 0 24 29 1 #"\n"
0 0 17 3 25 #"; and is case-insensitive"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 23 #"; A Letter is a 1String"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 17 3 11 #"; Constants"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 77
(
 #"; Lists containing Vowels, both uppercase and lowercase, with an ext"
 #"ra 'A' to"
) 0 0 24 29 1 #"\n"
0 0 17 3 26 #"; handle 'U' substitutions"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"V-LIST"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"A\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"E\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"I\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"O\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"U\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"A\""
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"V-LIST-L"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"a\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"e\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"i\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"o\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"u\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"a\""
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 17 3 6 #"; Main"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 34 #"; scramble-main : String -> String"
0 0 24 29 1 #"\n"
0 0 17 3 57 #"; Given a String, scramble every other word in the String"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 13 #"scramble-main"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 13 #"scramble-main"
0 0 24 3 1 #" "
0 0 19 3 13 #"\"Hello there\""
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 19 3 13 #"\"Hillu there\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 13 #"scramble-main"
0 0 24 3 1 #" "
0 0 19 3 20 #"\"Hello there friend\""
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 19 3 21 #"\"Hillu there froinid\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 13 #"scramble-main"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 3 1 #"("
0 0 14 3 7 #"combine"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 10 #"scramble/2"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 13 #"string->words"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 17 3 9 #"; Helpers"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #"; combine : [Listof String] -> String"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #"; Given a [Listof String], put together all of the Strings with a ' "
 #"' in between"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 7 #"combine"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 7 #"combine"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"Hello\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"there\""
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 19 3 13 #"\"Hello there\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 7 #"combine"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 3 1 #"("
0 0 15 3 4 #"cond"
0 0 24 3 1 #" "
0 0 24 3 1 #"["
0 0 24 3 1 #"("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 24 3 1 #"["
0 0 24 3 1 #"("
0 0 14 3 5 #"cons?"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 24 3 1 #"("
0 0 15 3 4 #"cond"
0 0 24 3 1 #" "
0 0 24 3 1 #"["
0 0 24 3 1 #"("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 24 3 1 #"("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 7 #"combine"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 24 3 1 #"["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 24 3 1 #"("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 19 3 3 #"\" \""
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 7 #"combine"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #"]"
0 0 24 3 1 #")"
0 0 24 3 1 #"]"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 49 #"; scramble/2 : [Listof String] -> [Listof String]"
0 0 24 29 1 #"\n"
0 0 17 3 66
#"; Given a {Listof String], apply the algorithm to every other word"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 10 #"scramble/2"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 10 #"scramble/2"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"Hello\""
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"Hillu\""
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 10 #"scramble/2"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"Hello\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"there\""
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"Hillu\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"there\""
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 10 #"scramble/2"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"Hello\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"there\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"friend\""
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"Hillu\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"there\""
0 0 24 3 1 #" "
0 0 19 3 9 #"\"froinid\""
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 10 #"scramble/2"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 3 1 #"("
0 0 14 3 12 #"scramble/2/a"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 59
#"; scramble/2/a : [Listof String] Natural -> [Listof String]"
0 0 24 29 1 #"\n"
0 0 17 3 59
#"; Given a [Listof String] and an iteration count, apply the"
0 0 24 29 1 #"\n"
0 0 17 3 31 #"; algorithm to every other word"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 12 #"scramble/2/a"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 12 #"scramble/2/a"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"Hello\""
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"Hillu\""
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 12 #"scramble/2/a"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"How\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"are\""
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"Huwu\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"are\""
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 12 #"scramble/2/a"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"How\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"are\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"you\""
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"Huwu\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"are\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"aua\""
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 12 #"scramble/2/a"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"How\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"are\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"you\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"friend\""
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"Huwu\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"are\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"aua\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"friend\""
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 12 #"scramble/2/a"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 3 1 #"("
0 0 15 3 4 #"cond"
0 0 24 3 1 #" "
0 0 24 3 1 #"["
0 0 24 3 1 #"("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 24 3 1 #")"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 24 3 1 #"["
0 0 24 3 1 #"("
0 0 14 3 5 #"cons?"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 24 3 1 #"("
0 0 15 3 4 #"cond"
0 0 24 3 1 #" "
0 0 24 3 1 #"["
0 0 24 3 1 #"("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 9 #"remainder"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 24 3 1 #"("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 15 #"scramble-string"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                      "
0 0 24 3 1 #"("
0 0 14 3 12 #"scramble/2/a"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 24 3 1 #"["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 24 3 1 #"("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                      "
0 0 24 3 1 #"("
0 0 14 3 12 #"scramble/2/a"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #"]"
0 0 24 3 1 #")"
0 0 24 3 1 #"]"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 43 #"; string->words : String -> [Listof String]"
0 0 24 29 1 #"\n"
0 0 17 3 77
(
 #"; Given a String, parse the string into it's different words, delimt"
 #"ed by ' '"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 13 #"string->words"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 13 #"string->words"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"Hello\""
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"Hello\""
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 13 #"string->words"
0 0 24 3 1 #" "
0 0 19 3 20 #"\"Hello there friend\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"Hello\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"there\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"friend\""
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 13 #"string->words"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 3 1 #"("
0 0 14 3 15 #"string->words/a"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 68
#"; string->words/a : String String [Listof String] -> [Listof String]"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #"; Given a String, an accumulated String, and the list so far, parse "
 #"it"
) 0 0 24 29 1 #"\n"
0 0 17 3 40 #"; into different words, delimited by ' '"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 15 #"string->words/a"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 15 #"string->words/a"
0 0 24 3 1 #" "
0 0 19 3 13 #"\"Hello there\""
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"Hello\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"there\""
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 15 #"string->words/a"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 3 1 #"("
0 0 15 3 4 #"cond"
0 0 24 3 1 #" "
0 0 24 3 1 #"["
0 0 24 3 1 #"("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 13 #"string-length"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 24 3 1 #"("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 24 3 1 #"["
0 0 24 3 1 #"("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 10 #"string-ith"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 19 3 3 #"\" \""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 24 3 1 #"("
0 0 14 3 15 #"string->words/a"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 9 #"substring"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 24 3 1 #"["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 24 3 1 #"("
0 0 14 3 15 #"string->words/a"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 9 #"substring"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                          "
0 0 24 3 1 #"("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 10 #"string-ith"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 3 1 #"]"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 24 29 1 #"\n"
0 0 17 3 36 #"; scramble-string : String -> String"
0 0 24 29 1 #"\n"
0 0 17 3 29 #"; Given a String, scramble it"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 15 #"scramble-string"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"Plank\""
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"Plenek\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 15 #"scramble-string"
0 0 24 3 1 #" "
0 0 19 3 12 #"\"Kensington\""
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 19 3 13 #"\"Kinsongtunu\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 15 #"scramble-string"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"Sponge\""
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"Spungi\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 15 #"scramble-string"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 3 1 #"("
0 0 14 3 16 #"scramble-letters"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 7 #"explode"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #"; scramble-letters : [Listof Letter] Vowel Natural [Listof Letter] -"
 #"> String"
) 0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #"; Given a [Listof Letter], a Vowel, an index, and the processed Lett"
 #"ers"
) 0 0 24 29 1 #"\n"
0 0 17 3 53 #"; so far, scramble the String by replacing each Vowel"
0 0 24 29 1 #"\n"
0 0 17 3 61
#"; with the next, then place an extra Vowel in the right spot "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 16 #"scramble-letters"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 16 #"scramble-letters"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"P\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"l\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"a\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"n\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"k\""
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 19 3 8 #"\"Plenek\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 16 #"scramble-letters"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"S\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"p\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"o\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"n\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"g\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"e\""
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 19 3 8 #"\"Spungi\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 16 #"scramble-letters"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"O\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"u\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"r\""
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"Uara\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 16 #"scramble-letters"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 3 1 #"("
0 0 15 3 4 #"cond"
0 0 24 3 1 #" "
0 0 24 3 1 #"["
0 0 24 3 1 #"("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 12 #"insert-vowel"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #")"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 24 3 1 #"["
0 0 24 3 1 #"("
0 0 14 3 5 #"cons?"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 24 3 1 #"("
0 0 15 3 4 #"cond"
0 0 24 3 1 #" "
0 0 24 3 1 #"["
0 0 24 3 1 #"("
0 0 14 3 6 #"vowel?"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 24 3 1 #"("
0 0 14 3 16 #"scramble-letters"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                 "
0 0 24 3 1 #"("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 15 #"scramble-letter"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                 "
0 0 24 3 1 #"("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 15 #"scramble-letter"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 24 3 1 #"["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 24 3 1 #"("
0 0 14 3 16 #"scramble-letters"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                  "
0 0 24 3 1 #"("
0 0 14 3 6 #"append"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                   "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #"]"
0 0 24 3 1 #")"
0 0 24 3 1 #"]"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 36 #"; scramble-letter : Letter -> Letter"
0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #"; Given a Letter, determine if it is a Vowel, then scramble it, retu"
 #"rning"
) 0 0 24 29 1 #"\n"
0 0 17 3 25 #"; the proper case as well"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 15 #"scramble-letter"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"k\""
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"k\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 15 #"scramble-letter"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"K\""
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"K\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 15 #"scramble-letter"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"a\""
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"e\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 15 #"scramble-letter"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"E\""
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"I\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 15 #"scramble-letter"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"y\""
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"a\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 15 #"scramble-letter"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"Y\""
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"A\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 15 #"scramble-letter"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 3 1 #"("
0 0 15 3 4 #"cond"
0 0 24 3 1 #" "
0 0 24 3 1 #"["
0 0 24 3 1 #"("
0 0 14 3 11 #"string-ci=?"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"y\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 24 3 1 #"("
0 0 15 3 4 #"cond"
0 0 24 3 1 #" "
0 0 24 3 1 #"["
0 0 24 3 1 #"("
0 0 14 3 18 #"string-lower-case?"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"a\""
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 24 3 1 #"["
0 0 24 3 1 #"("
0 0 14 3 18 #"string-upper-case?"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"A\""
0 0 24 3 1 #"]"
0 0 24 3 1 #")"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 24 3 1 #"["
0 0 24 3 1 #"("
0 0 14 3 6 #"vowel?"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 24 3 1 #"("
0 0 15 3 4 #"cond"
0 0 24 3 1 #" "
0 0 24 3 1 #"["
0 0 24 3 1 #"("
0 0 14 3 18 #"string-lower-case?"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 24 3 1 #"("
0 0 14 3 8 #"list-ref"
0 0 24 3 1 #" "
0 0 14 3 8 #"V-LIST-L"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 10 #"find-index"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 24 3 1 #"["
0 0 24 3 1 #"("
0 0 14 3 18 #"string-upper-case?"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 24 3 1 #"("
0 0 14 3 8 #"list-ref"
0 0 24 3 1 #" "
0 0 14 3 6 #"V-LIST"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 10 #"find-index"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #"]"
0 0 24 3 1 #")"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 24 3 1 #"["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #"]"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #"; find-index : Vowel -> Natural"
0 0 24 29 1 #"\n"
0 0 17 3 57 #"; Given a Vowel, return the index of that Vowel in V-LIST"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 10 #"find-index"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"a\""
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 10 #"find-index"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"A\""
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 10 #"find-index"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"e\""
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 10 #"find-index"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"u\""
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 10 #"find-index"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"i\""
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 10 #"find-index"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"o\""
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 10 #"find-index"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 3 1 #"("
0 0 15 3 4 #"cond"
0 0 24 3 1 #" "
0 0 24 3 1 #"["
0 0 24 3 1 #"("
0 0 14 3 11 #"string-ci=?"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"a\""
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 24 3 1 #"["
0 0 24 3 1 #"("
0 0 14 3 11 #"string-ci=?"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"e\""
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 24 3 1 #"["
0 0 24 3 1 #"("
0 0 14 3 11 #"string-ci=?"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"i\""
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 24 3 1 #"["
0 0 24 3 1 #"("
0 0 14 3 11 #"string-ci=?"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"o\""
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 24 3 1 #"["
0 0 24 3 1 #"("
0 0 14 3 11 #"string-ci=?"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"u\""
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #"]"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 56 #"; insert-vowel : [Listof Letter] Vowel Natural -> String"
0 0 24 29 1 #"\n"
0 0 17 3 79
(
 #"; Given a [Listof Letter], Vowel, and index of that Vowel, return a "
 #"String with"
) 0 0 24 29 1 #"\n"
0 0 17 3 65
#"; the Vowel inserted 2 positions after the last Vowel replacement"
0 0 24 29 1 #"\n"
0 0 17 3 63
#"; Note - if the last replacement is at the end, then do nothing"
0 0 24 29 1 #"\n"
0 0 17 3 77
(
 #";      - will not insert a vowel unless the String is completely alp"
 #"habetical"
) 0 0 24 29 1 #"\n"
0 0 17 3 75
(
 #";      - unless the entire String is uppercase, it will insert a dow"
 #"n-cased"
) 0 0 24 29 1 #"\n"
0 0 17 3 14 #";        Vowel"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 12 #"insert-vowel"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"e\""
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 12 #"insert-vowel"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 7 #"explode"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"Ebuat\""
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"a\""
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"Ebuat\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 12 #"insert-vowel"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 7 #"explode"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"Ebuat\""
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"a\""
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"Ebuata\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 12 #"insert-vowel"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 7 #"explode"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"Uar\""
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"a\""
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"Uara\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 12 #"insert-vowel"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 7 #"explode"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"Innnt\""
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"I\""
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"Ininnt\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 12 #"insert-vowel"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 7 #"explode"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"Hillu\""
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"u\""
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"Hillu\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 12 #"insert-vowel"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 7 #"explode"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"Hill\""
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"i\""
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"Hilil\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 12 #"insert-vowel"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 7 #"explode"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"He,\""
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"e\""
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"He,\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 12 #"insert-vowel"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 7 #"explode"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"HE\""
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"E\""
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"HE\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 12 #"insert-vowel"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 7 #"explode"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"HEEKK\""
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"E\""
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"HEEKEK\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 8 #"insert-v"
0 0 14 3 1 #"o"
0 0 14 3 1 #"w"
0 0 14 3 2 #"el"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 7 #"explode"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"HEK\""
0 0 24 3 2 #") "
0 0 19 3 3 #"\"E\""
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"HEKE\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 12 #"insert-vowel"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 3 1 #"("
0 0 15 3 4 #"cond"
0 0 24 3 1 #" "
0 0 24 3 1 #"["
0 0 24 3 1 #"("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 24 3 1 #"["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 24 3 1 #"("
0 0 15 3 4 #"cond"
0 0 24 3 1 #" "
0 0 24 3 1 #"["
0 0 24 3 1 #"("
0 0 14 3 18 #"string-alphabetic?"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 10 #"string-ith"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 7 #"implode"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 4 #"sub1"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 24 3 1 #"("
0 0 15 3 4 #"cond"
0 0 24 3 1 #" "
0 0 24 3 1 #"["
0 0 24 3 1 #"("
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                       "
0 0 24 3 1 #"("
0 0 15 3 4 #"cond"
0 0 24 3 1 #" "
0 0 24 3 1 #"["
0 0 24 3 1 #"("
0 0 14 3 18 #"string-upper-case?"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 7 #"implode"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                              "
0 0 24 3 1 #"("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 9 #"substring"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 7 #"implode"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                             "
0 0 24 3 1 #"("
0 0 14 3 9 #"substring"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 7 #"implode"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                             "
0 0 24 3 1 #"["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                              "
0 0 24 3 1 #"("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 9 #"substring"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 7 #"implode"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                             "
0 0 24 3 1 #"("
0 0 14 3 15 #"string-downcase"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                             "
0 0 24 3 1 #"("
0 0 14 3 9 #"substring"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 7 #"implode"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #"]"
0 0 24 3 1 #")"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                      "
0 0 24 3 1 #"["
0 0 24 3 1 #"("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                       "
0 0 24 3 1 #"("
0 0 15 3 4 #"cond"
0 0 24 3 1 #" "
0 0 24 3 1 #"["
0 0 24 3 1 #"("
0 0 14 3 18 #"string-upper-case?"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 7 #"implode"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                              "
0 0 24 3 1 #"("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 7 #"implode"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #")"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                             "
0 0 24 3 1 #"["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 7 #"implode"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 50 #"                                                  "
0 0 24 3 1 #"("
0 0 14 3 15 #"string-downcase"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #"]"
0 0 24 3 1 #")"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                      "
0 0 24 3 1 #"["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 7 #"implode"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 3 1 #"]"
0 0 24 3 1 #")"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 24 3 1 #"["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 7 #"implode"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 3 1 #"]"
0 0 24 3 1 #")"
0 0 24 3 1 #"]"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 38 #"; string-downcase : 1String -> 1String"
0 0 24 29 1 #"\n"
0 0 17 3 43 #"; Given a 1String, convert it to lower case"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 15 #"string-downcase"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"H"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"h"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 15 #"string-downcase"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"h"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"h"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 15 #"string-downcase"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 3 1 #"("
0 0 14 3 11 #"int->string"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 24 3 1 #"("
0 0 14 3 13 #"char->integer"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 13 #"char-downcase"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 13 #"integer->char"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 11 #"string->int"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 17 3 12 #"; Predicates"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 28 #"; vowel? : Letter -> Boolean"
0 0 24 29 1 #"\n"
0 0 17 3 64
#"; Given a Letter, determine if it is a Vowel, regardless of case"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 6 #"vowel?"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 6 #"vowel?"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"a"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 6 #"vowel?"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"e"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 6 #"vowel?"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"i"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 6 #"vowel?"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"o"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 6 #"vowel?"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"u"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 6 #"vowel?"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"y"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 6 #"vowel?"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"k"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 6 #"vowel?"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"O"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 6 #"vowel?"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 3 1 #"("
0 0 15 3 4 #"cond"
0 0 24 3 1 #" "
0 0 24 3 1 #"["
0 0 24 3 1 #"("
0 0 14 3 11 #"string-ci=?"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"a"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 24 3 1 #"["
0 0 24 3 1 #"("
0 0 14 3 11 #"string-ci=?"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"e"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 24 3 1 #"["
0 0 24 3 1 #"("
0 0 14 3 11 #"string-ci=?"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"i"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 24 3 1 #"["
0 0 24 3 1 #"("
0 0 14 3 11 #"string-ci=?"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"o"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 24 3 1 #"["
0 0 24 3 1 #"("
0 0 14 3 11 #"string-ci=?"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"u"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 24 3 1 #"["
0 0 24 3 1 #"("
0 0 14 3 11 #"string-ci=?"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 2 #"y\""
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 24 3 1 #"["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #"]"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0           0
